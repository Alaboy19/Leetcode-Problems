'''
17. Letter Combinations of a Phone Number
Given:
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. 
Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Solution:
1) get on the char iteratively on current mappning and recursively call next index mapping with str+chosen char iteratively 
2) base case when len(currentStr) == len(digits)
3) at base case append path to res 
'''
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        res = []
        mapping = { "2": "abc",
                    "3": "def", 
                    "4": "ghi",
                    "5": "jkl",
                    "6":"mno", 
                    "7": "pqrs", 
                    "8": "tuv", 
                    "9": "wxyz" }

        def dfs(i, currentStr):
            if len(currentStr) == len(digits):
                res.append(currentStr)
                return

            for c in mapping[digits[i]]:
                dfs(i+1, currentStr + c)
            
        if digits:
            dfs(0,"") 
        return res
